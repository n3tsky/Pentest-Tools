##################
###### Variables
##################
GREEN="\033[0;32m"
RED="\033[0;31m"
ORANGE="\033[0;33m"
NOCOLOR="\033[0m"

# Options
if [ "$verbose" == "false" ]; then
  QUIET="--quiet"
else
  QUIET=""
fi

# Binaries
APT="/usr/bin/apt"
APTKEY="/usr/bin/apt-key"
CHMOD="/bin/chmod"
CURL="/usr/bin/curl"
DPKG="/usr/bin/dpkg"
ECHO="/bin/echo"
GIT="/usr/bin/git"
GREP="/bin/grep"
LN="/bin/ln"
MAKE="/usr/bin/make"
MKDIR="/bin/mkdir"
PIP="/usr/bin/pip"
RM="/bin/rm"
SED="/bin/sed"
SUDO="/usr/bin/sudo"
TAR="/bin/tar"
TEE="/usr/bin/tee"
UNZIP="/usr/bin/unzip"
WGET="/usr/bin/wget"
ZZ="/usr/bin/7z"
##################
###### Functions
##################

# Helper function
function f_help() {
  echo -e "\nUsage: $0"
  echo -e "\tPlease change both variables \"username\" and \"directory\" (first lines of the script)"
  echo -e "\tAll tools will be installed under \"directory\" with \"username\" privileges"
  echo -e "\n\t/!\ This script doesn't need (and not recommended) to be run as root (but you might be required to type in your password for administrative tasks - apt install, etc.)"
  exit 1
}

# Generic function to print stuff
function f_print() {
  # Something to print?
  if [ $# != 0 ]; then
    if [ $# == 1 ]; then
      # Just print the message
      echo -e "${NOCOLOR}$1${NOCOLOR}"
    else
      if [ $2 == "error" ]; then
        echo -e "${RED}$1${NOCOLOR}"
      elif [ $2 == "ok" ]; then
        echo -e "${GREEN}$1${NOCOLOR}"
      elif [ $2 == "warning" ]; then
        echo -e "${ORANGE}$1${NOCOLOR}"
      fi
    fi
  fi
}

# Install through git
function f_dl_git() {
  LABEL="$1"
  URL="$2"
  DEST="$3"
  OPTS="$4"

  f_print "\n\t[*] Installing $LABEL"
  cmd="$GIT clone $QUIET $OPTS $URL $DEST"
  f_print "\t[*] cmd: $cmd"
  $GIT clone $QUIET $OPTS "$URL" $DEST
  f_print "\t[*] Installed $LABEL - done" "ok"
}

# Install through wget
function f_dl_wget() {
  LABEL="$1"
  URL="$2"
  DEST="$3"
  OPTS="$4"

  f_print "\n\t[*] Installing $LABEL"
  cmd="$WGET $QUIET $URL $OPTS -O $DEST"
  f_print "\t[*] cmd: $cmd"
  $WGET $QUIET "$URL" $OPTS -O $DEST
  f_print "\t[*] Installed $LABEL - done" "ok"
}

# Unzip (quietly) and remove zip file afterwards
function f_quiet_unzip_and_remove() {
  FILE=$1
  DEST=$2

  $UNZIP -qq "$FILE" -d "$DEST"
  $RM "$FILE"
}

# Install all required dependencies
function f_install_dependencies() {

  if [ "$install" == "true" ]; then
    PKG=(
    build-essential curl python-dev p7zip-full git net-tools openjdk-8-jre python-pip vim # default
    aircrack-ng gdb hydra nmap smbclient wireshark # Some tools
    libssl-dev libffi-dev # CME
    yasm libgmp-dev libpcap-dev pkg-config libbz2-dev zlib1g-dev libopenmpi-dev openmpi-bin # JtR
    libgconf-2-4 # BloodHound
    libreadline5 libreadline-dev libusb-0.1-4 libusb-dev libqt4-dev perl pkg-config wget libncurses5-dev gcc-arm-none-eabi libstdc++-arm-none-eabi-newlib # Proxmarkv3
    libqt5xml5 # Hopper
    )

    f_print "\n[*] Installing dependencies\n"
    # Display list of dependencies
    for i in ${PKG[@]}; do echo $i; done
    f_print ""

    # Ask user for confirmation
    while true; do
      read -p "Are you sure (y/n)? " -n 1 -r
      echo ""
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        break
      elif [[ $REPLY =~ ^[Nn]$ ]]; then
        $ECHO "Exiting..."
        exit 1
      fi
    done

    # Install dependencies
    $SUDO $APT -qq -y install ${PKG[@]}

    f_print "\n[*] Installing dependencies - done" "ok"
  else
    f_print "\n[*] Skipping dependencies" "ok"
  fi
}

# Install tools
function f_install() {
  METHOD="$1"
  ARGS="$2"

  if [ "$install" == "true" ]; then
    if [ "$METHOD" == "pip" ]; then
      $PIP install -r "$ARGS"
    fi
  fi
}

########################################
# NETWORK
########################################
function f_install_tools_network() {
  prefix="$directory/network"
  f_print "\n[*] Install network tools ($prefix)"

  # testSSL
  f_dl_git "TestSSL" "https://github.com/drwetter/testssl.sh.git" "$prefix/testSSL" "--depth 1"
  # Enum4Linux
  f_dl_git "Enum4Linux" "https://github.com/portcullislabs/enum4linux.git" "$prefix/enum4linux"
  # Responder
  f_dl_git "Responder" "https://github.com/SpiderLabs/Responder.git" "$prefix/responder"
  # impacket
  f_dl_git "Impacket" "https://github.com/CoreSecurity/impacket.git" "$prefix/impacket"
  f_install "pip" "$prefix/impacket/requirements.txt"
  # Sublist3r
  f_dl_git "Sublist3r" "https://github.com/aboul3la/Sublist3r.git" "$prefix/sublist3r"
  f_install "pip" "$prefix/sublist3r/requirements.txt"

  f_print "\n[*] Install network tools - done" "ok"
}

########################################
# WEB
########################################
function f_install_tools_web() {
  prefix="$directory/web"
  f_print "\n[*] Install web tools ($prefix)"

  # reGeorg
  f_dl_git "reGeorg" "https://github.com/sensepost/reGeorg.git" "$prefix/reGeorg"
  # Tunna
  f_dl_git "Tunna" "https://github.com/SECFORCE/Tunna.git" "$prefix/tunna"
  # SQLMap
  f_dl_git "SQLMap" "https://github.com/sqlmapproject/sqlmap.git" "$prefix/sqlmap"
  # WFuzz
  f_dl_git "WFuzz" "https://github.com/xmendez/wfuzz.git" "$prefix/wfuzz"
  # Loubia
  f_dl_git "Loubia" "https://github.com/metalnas/loubia.git" "$prefix/loubia"
  # Dirbuster
  f_dl_wget "Dirbuster" "https://downloads.sourceforge.net/dirbuster/DirBuster-0.12.tar.bz2" "$prefix/dirbuster-0.12.tar.bz2"
  $TAR -xf "$prefix/dirbuster-0.12.tar.bz2" -C "$prefix"
  $RM "$prefix/dirbuster-0.12.tar.bz2"
  # Spartan
  f_dl_git "Spartan" "https://github.com/sensepost/SPartan.git" "$prefix/spartan"
  # SoapUI
  f_dl_wget "SoapUI" "https://s3.amazonaws.com/downloads.eviware/soapuios/5.4.0/SoapUI-x64-5.4.0.sh" "$prefix/soapUI.sh"

  f_print "\n[*] Install web tools - done" "ok"
}

########################################
# PWCracking
########################################
function f_install_tools_pwcracking() {
  prefix="$directory/pwcracking"
  f_print "\n[*] Install password cracking tools ($prefix)"

  # JTR
  f_dl_git "JohnTheRipper" "https://github.com/magnumripper/JohnTheRipper.git" "$prefix/johnTheRipper-1.8.0-jumbo" "-b bleeding-jumbo"
  current_dir=$(/bin/pwd)
  cd "$prefix/johnTheRipper-1.8.0-jumbo/src/" && ./configure > configure.result && $MAKE -s clean > make.result && $MAKE -sj4 >> make.result
  cd "$current_dir"

  # Hashcat
  f_dl_wget "Hashcat" "https://hashcat.net/files/hashcat-4.2.1.7z" "/tmp/hashcat.7z"
  $ZZ x "/tmp/hashcat.7z" -o"$prefix/"
  $RM "/tmp/hashcat.7z"

  f_print "\n[*] Install password cracking tools - done" "ok"
}

########################################
# Wordlist
########################################
function f_install_tools_wordlists() {
  prefix="$directory/wordlists"
  f_print "\n[*] Install wordlists ($prefix)"

  # FuzzDB
  f_dl_git "FuzzDB" "https://github.com/fuzzdb-project/fuzzdb.git" "$prefix/FuzzDB"
  # wfuzz
  $LN -s "$directory/Tools/web/wfuzz/wordlists" "$prefix/wfuzz"
  # SecLists
  f_dl_git "SecLists" "https://github.com/danielmiessler/SecLists.git" "$prefix/SecLists"
  # ProbableWordlists
  f_dl_git "ProbableWordlists" "https://github.com/berzerk0/Probable-Wordlists.git" "$prefix/ProbableWordlists"
  # NaugthyStrings
  f_dl_git "NaugthyStrings" "https://github.com/minimaxir/big-list-of-naughty-strings.git" "$prefix/NaugthyStrings"

  f_print "\n[*] Install wordlists - done" "ok"
}

########################################
# Forensic
########################################
function f_install_tools_forensic() {
  prefix="$directory/forensic"
  f_print "\n[*] Install forensic tools ($prefix)"

  # Volatility
  f_dl_git "Volatility" "https://github.com/volatilityfoundation/volatility.git" "$prefix/Volatility"

  f_print "\n[*] Install forensic tools - done" "ok"
}

########################################
# Windows
########################################
function f_install_tools_windows() {
  prefix="$directory/windows"
  f_print "\n[*] Install Windows-related tools ($prefix)"

  # Mimikatz
  f_dl_wget "Mimikatz" "https://github.com/gentilkiwi/mimikatz/releases/download/2.1.1-20180616/mimikatz_trunk.7z" "/tmp/mimikatz_trunk.7z"
  $ZZ x "/tmp/mimikatz_trunk.7z" -o"$prefix/mimikatz"
  $RM "/tmp/mimikatz_trunk.7z"
  # CME
  $PIP install --user pipenv
  f_dl_git "CrackMapExec" "https://github.com/byt3bl33d3r/CrackMapExec" "$prefix/CrackMapExec" "--recursive"
  # cd CrackMapExec && pipenv install
  # pipenv shell
  # python setup.py install

  # Nishang
  f_dl_git "Nishang" "https://github.com/samratashok/nishang.git" "$prefix/Nishang"
  # PowerSploit
  f_dl_git "PowerSploit" "https://github.com/PowerShellMafia/PowerSploit.git" "$prefix/PowerSploit"
  # Empire
  f_dl_git "Empire" "https://github.com/EmpireProject/Empire.git" "$prefix/Empire"
  # BloodHound
  # BloodHound - neo4j
  $WGET --quiet -O - "https://debian.neo4j.org/neotechnology.gpg.key" | $SUDO $APTKEY add -
  $ECHO "deb https://debian.neo4j.org/repo stable/" | $SUDO $TEE "/etc/apt/sources.list.d/neo4j.list"
  $SUDO $APT -qq update
  $SUDO $APT -qq -y install neo4j
  # BloodHound - release binaries
  f_dl_wget "BloodHound" "https://github.com/BloodHoundAD/BloodHound/releases/download/2.0/BloodHound-linux-x64.zip" "/tmp/BloodHound.zip"
  f_quiet_unzip_and_remove "/tmp/BloodHound.zip" "$prefix/"

  # Sysinternals
  f_dl_wget "Sysinternals" "https://download.sysinternals.com/files/SysinternalsSuite.zip" "/tmp/sysinternals.zip"
  f_quiet_unzip_and_remove "/tmp/sysinternals.zip" "$prefix/sysinternals"

  f_print "\n[*] Install Windows-related tools - done" "ok"
}

########################################
# Database
########################################
function f_install_tools_database() {
  prefix="$directory/database"
  f_print "\n[*] Install database tools ($prefix)"

  # DbVis
  f_dl_wget "DbVis" "http://www.dbvis.com/product_download/dbvis-10.0.13/media/dbvis_linux_10_0_13.deb" "/tmp/dbvis.deb"
  $SUDO $DPKG -i "/tmp/dbvis.deb"
  $RM "/tmp/dbvis.deb"
  # Odat
  f_dl_git "Odat" "https://github.com/quentinhardy/odat.git" "$prefix/odat"
  # MSdat
  f_dl_git "MSdat" "https://github.com/quentinhardy/msdat.git" "$prefix/msdat"

  f_print "\n[*] Install database tools - done" "ok"
}

########################################
# Exploits
########################################
function f_install_tools_exploits() {
  prefix="$directory/exploits"
  f_print "\n[*] Install exploits tools ($prefix)"

  # WindowsExploitSuggester
  f_dl_git "WindowsExploitSuggester" "https://github.com/GDSSecurity/Windows-Exploit-Suggester.git" "$prefix/windows-exploit-suggester"
  # metasploit
  f_dl_wget "Metasploit" "https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb" "/tmp/msfinstall"
  $CHMOD 755 "/tmp/msfinstall"
  $SUDO "/tmp/msfinstall"
  # Peda
  f_dl_git "Peda" "https://github.com/longld/peda.git" "$prefix/peda"
  $ECHO "source $prefix/peda/peda.py" >> "/home/$username/.gdbinit"

  f_print "\n[*] Install exploits tools - done" "ok"
}

########################################
# Reverse
########################################
function f_install_tools_reverse() {
  prefix="$directory/reverse"
  f_print "\n[*] Install reverse tools ($prefix)"

  # OllyDBG
  f_dl_wget "OllyDBG" "http://www.ollydbg.de/odbg201.zip" "/tmp/olly.zip"
  f_quiet_unzip_and_remove "/tmp/olly.zip" "$prefix/ollyDBG2"
  # Immunity
  token="$($CURL -s "https://debugger.immunityinc.com/ID_register.py" | $GREP -i csrfmiddlewaretoken | $SED "s/.*value='\([^ ]*\)'.*/\1/")"
  hash="$($CURL -s -d "address=a&company=a&csrfmiddlewaretoken=$token&email=a@a.com&fullname=a" -H "Referer: https://debugger.immunityinc.com/ID_register.py" -b "csrftoken=$token" "https://debugger.immunityinc.com/ID_register.py" | $GREP ID | $SED "s/.*hash=\([^ ]*\)><.*/\1/")"
  f_dl_wget "ImmunityDebugger" "https://debugger.immunityinc.com/getID.py?hash=$hash" "$prefix/immunityDebugger.exe"
  # Radare2
  f_dl_git "Radare2" "https://github.com/radare/radare2.git" "$prefix/radare2"
  # Hopper - Free
  f_dl_wget "Hopper" "https://d2ap6ypl1xbe4k.cloudfront.net/Hopper-v4-4.3.26-Linux.deb" "/tmp/hopper.deb"
  $SUDO $DPKG -i "/tmp/hopper.deb"
  $RM "/tmp/hopper.deb"

  f_print "\n[*] Install reverse tools - done" "ok"
}

########################################
# thickClients
########################################
function f_install_tools_thickClients() {
  prefix="$directory/thickClients"
  f_print "\n[*] Install thickClients tools ($prefix)"

  # ProcessHacker
  f_dl_wget "ProcessHacker" "https://wj32.org/processhacker/rel/processhacker-2.39-bin.zip" "/tmp/processhacker.zip"
  f_quiet_unzip_and_remove "/tmp/processhacker.zip" "$prefix/processHacker"
  # EchoMirage
  f_dl_wget "EchoMirage" "https://kent.dl.sourceforge.net/project/echomirage.oldbutgold.p/Echo Mirage.zip" "/tmp/echomirage.zip"
  f_quiet_unzip_and_remove "/tmp/echomirage.zip" "$prefix/echoMirage"
  # Sysinternals
  $LN -s "$directory/Tools/windows/sysinternals" "$prefix/sysinternals"

  f_print "\n[*] Install thickClients tools - done" "ok"
}

########################################
# Mobile
########################################
function f_install_tools_mobile() {
  prefix="$directory/mobile"
  f_print "\n[*] Install mobile tools ($prefix)"

  # JD-GUI
  f_dl_wget "JD-GUI" "https://github.com/java-decompiler/jd-gui/releases/download/v1.4.0/jd-gui-1.4.0.jar" "$prefix/jd-gui.jar"

  f_print "\n[*] Install mobile tools - done" "ok"
}

########################################
# RFID
########################################
function f_install_tools_RFID() {
  prefix="$directory/RFID"
  f_print "\n[*] Install RFID tools ($prefix)"

  # Proxmark
  f_dl_git "Proxmarkv3" "https://github.com/Proxmark/proxmark3.git" "$prefix/proxmark3"

  f_print "\n[*] Install RFID tools - done" "ok"
}

########################################
# Generic
########################################
function f_install_tools_XXX() {
  prefix="$directory/XXX"
  f_print "\n[*] Install XXX tools ($prefix)"

  # XXX

  f_print "\n[*] Install XXX tools - done" "ok"
}
