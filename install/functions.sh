##################
###### Variables
##################
GREEN="\033[0;32m"
RED="\033[0;31m"
ORANGE="\033[0;33m"
NOCOLOR="\033[0m"

# Options
if [ "$verbose" == "false" ]; then
  QUIET="--quiet"
else
  QUIET=""
fi

# Binaries
APT="/usr/bin/apt"
APTKEY="/usr/bin/apt-key"
CHMOD="/bin/chmod"
DPKG="/usr/bin/dpkg"
ECHO="/bin/echo"
GIT="/usr/bin/git"
MAKE="/usr/bin/make"
MKDIR="/bin/mkdir"
PIP="/usr/bin/pip"
RM="/bin/rm"
SUDO="/usr/bin/sudo"
TAR="/bin/tar"
TEE="/usr/bin/tee"
UNZIP="/usr/bin/unzip"
WGET="/usr/bin/wget"
ZZ="/usr/bin/7z"
##################
###### Functions
##################

# Helper function
function f_help() {
  echo -e "\nUsage: $0"
  echo -e "\tPlease change both variables \"username\" and \"directory\" (first lines of the script)"
  echo -e "\tAll tools will be installed under directory \"directory/Tools\" with \"username\" privileges"
  echo -e "\n\t/!\ This script doesn't need (and not recommended) to be run as root (but you might be required to type in your password for administrative tasks - apt install, etc.)"
  exit 1
}

# Generic function to print stuff
function f_print() {
  # Something to print?
  if [ $# != 0 ]; then
    if [ $# == 1 ]; then
      # Just print the message
      echo -e "${NOCOLOR}$1${NOCOLOR}"
    else
      if [ $2 == "error" ]; then
        echo -e "${RED}$1${NOCOLOR}"
      elif [ $2 == "ok" ]; then
        echo -e "${GREEN}$1${NOCOLOR}"
      elif [ $2 == "warning" ]; then
        echo -e "${ORANGE}$1${NOCOLOR}"
      fi
    fi
  fi
}

# Install through git
function f_install_git_clone() {
  LABEL=$1
  URL=$2
  DEST=$3
  OPTS=$4

  f_print "\n\t[*] Installing $LABEL"
  cmd="$GIT clone $QUIET $OPTS $URL $DEST"
  f_print "\t[*] cmd: $cmd"
  $GIT clone $QUIET $OPTS $URL $DEST
  f_print "\t[*] Installed $LABEL - done" "ok"
}

# Install through wget
function f_install_wget() {
  LABEL=$1
  URL=$2
  DEST=$3
  OPTS=$4

  f_print "\n\t[*] Installing $LABEL"
  cmd="$WGET $QUIET $URL $OPTS -O $DEST"
  f_print "\t[*] cmd: $cmd"
  $WGET $QUIET $URL $OPTS -O $DEST
  f_print "\t[*] Installed $LABEL - done" "ok"
}

# Execute commands as a low privileged user
function f_execute_as_low_user() {
  SU_USERNAME=$1
  CMD=$2
  $SU "$SU_USERNAME" -c "$CMD"
}

function f_install_dependencies() {
  # CME: libssl-dev libffi-dev python-dev build-essential
  PKG="libssl-dev libffi-dev python-dev build-essential aircrack-ng nmap wireshark"
  f_print "\n[*] Installing dependencies"
  # Display list of dependencies
  for i in ${PKG[@]}; do echo $i; done

  # Ask user for confirmation
  while true; do
    read -p "Are you sure (y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      break
    elif [[ $REPLY =~ ^[Nn]$ ]]; then
      $ECHO "Exiting..."
      exit 1
    fi
  done

  # Install dependencies
  $SUDO $APT install -qq -y ${PKG[@]}

  f_print "\n[*] Installing dependencies - done" "ok"
}

########################################
# WEB
########################################
function f_install_tools_web() {
  prefix="$directory/Tools/web/"
  f_print "\n[*] Install web tools ($prefix)"

  # reGeorg
  f_install_git_clone "reGeorg" "https://github.com/sensepost/reGeorg.git" "$prefix/reGeorg"
  # Tunna
  f_install_git_clone "Tunna" "https://github.com/SECFORCE/Tunna.git" "$prefix/tunna"
  # SQLMap
  f_install_git_clone "SQLMap" "https://github.com/sqlmapproject/sqlmap.git" "$prefix/sqlmap"
  # WFuzz
  f_install_git_clone "WFuzz" "https://github.com/xmendez/wfuzz.git" "$prefix/wfuzz"
  # Loubia
  f_install_git_clone "Loubia" "https://github.com/metalnas/loubia.git" "$prefix/loubia"

  # Dirbuster
  f_install_wget "Dirbuster" "https://downloads.sourceforge.net/dirbuster/DirBuster-0.12.tar.bz2" "$prefix/dirbuster-0.12.tar.bz2"
  $TAR -xvf "$prefix/dirbuster-0.12.tar.bz2" -C "$prefix" >/dev/null
  $RM "$prefix/dirbuster-0.12.tar.bz2"

  f_print "\n[*] Install web tools - done" "ok"
}

########################################
# NETWORK
########################################
function f_install_tools_network() {
  prefix="$directory/Tools/network"
  f_print "\n[*] Install network tools ($prefix)"

  # testSSL
  f_install_git_clone "TestSSL" "https://github.com/drwetter/testssl.sh.git" "$prefix/testSSL" "--depth 1"
  # Enum4Linux
  f_install_git_clone "Enum4Linux" "https://github.com/portcullislabs/enum4linux.git" "$prefix/enum4linux"
  # Responder
  f_install_git_clone "Responder" "https://github.com/SpiderLabs/Responder.git" "$prefix/responder"
  # impacket
  f_install_git_clone "Impacket" "https://github.com/CoreSecurity/impacket.git" "$prefix/impacket"
  # Sublist3r
  f_install_git_clone "Sublist3r" "https://github.com/aboul3la/Sublist3r.git" "$prefix/sublist3r"

  f_print "\n[*] Install network tools - done" "ok"
}

########################################
# PWCracking
########################################
function f_install_tools_pwcracking() {
  prefix="$directory/Tools/pwcracking"
  f_print "\n[*] Install password cracking tools ($prefix)"

  # JTR
  f_install_git_clone "JohnTheRipper" "https://github.com/magnumripper/JohnTheRipper.git" "$prefix/johnTheRipper-1.8.0-jumbo1"
  #f_execute_as_low_user "$main_user_name" "cd $prefix/johnTheRipper-1.8.0-jumbo1/src/; ./configure && make"

  # Hashcat
  f_install_wget "Hashcat" "https://hashcat.net/files/hashcat-4.2.0.7z" "/tmp/hashcat-4.2.0.7z"
  $ZZ x "/tmp/hashcat-4.2.0.7z" -o"$prefix/"
  $RM "/tmp/hashcat-4.2.0.7z"

  f_print "\n[*] Install password cracking tools - done" "ok"
}

########################################
# Wordlist
########################################
function f_install_tools_wordlists() {
  prefix="$directory/Tools/wordlists"
  f_print "\n[*] Install wordlists ($prefix)"

  # FuzzDB
  f_install_git_clone "FuzzDB" "https://github.com/fuzzdb-project/fuzzdb.git" "$prefix/FuzzDB"
  # wfuzz
  $LN -s "$directory/Tools/web/wfuzz/wordlists" "$prefix/wfuzz"
  # SecLists
  f_install_git_clone "SecLists" "https://github.com/danielmiessler/SecLists.git" "$prefix/SecLists"
  # ProbableWordlists
  f_install_git_clone "ProbableWordlists" "https://github.com/berzerk0/Probable-Wordlists.git" "$prefix/ProbableWordlists"
  # NaugthyStrings
  f_install_git_clone "NaugthyStrings" "https://github.com/minimaxir/big-list-of-naughty-strings.git" "$prefix/NaugthyStrings"

  f_print "\n[*] Install wordlists - done" "ok"
}

########################################
# Forensic
########################################
function f_install_tools_forensic() {
  prefix="$directory/Tools/forensic"
  f_print "\n[*] Install forensic tools ($prefix)"

  # Volatility
  f_install_git_clone "Volatility" "https://github.com/volatilityfoundation/volatility.git" "$prefix/Volatility"

  f_print "\n[*] Install forensic tools - done" "ok"
}

########################################
# Windows
########################################
function f_install_tools_windows() {
  prefix="$directory/Tools/windows"
  f_print "\n[*] Install Windows-related tools ($prefix)"

  # Mimikatz
  f_install_wget "Mimikatz" "https://github.com/gentilkiwi/mimikatz/releases/download/2.1.1-20180616/mimikatz_trunk.7z" "/tmp/mimikatz_trunk.7z"
  $ZZ x "/tmp/mimikatz_trunk.7z" -o"$prefix/mimikatz"
  $RM "/tmp/mimikatz_trunk.7z"
  # CME
  $PIP install --user pipenv
  f_install_git_clone "CrackMapExec" "https://github.com/byt3bl33d3r/CrackMapExec" "$prefix/CrackMapExec" "--recursive"
  # cd CrackMapExec && pipenv install
  # pipenv shell
  # python setup.py install

  # Nishang
  f_install_git_clone "Nishang" "https://github.com/samratashok/nishang.git" "$prefix/Nishang"
  # PowerSploit
  f_install_git_clone "PowerSploit" "https://github.com/PowerShellMafia/PowerSploit.git" "$prefix/PowerSploit"
  # Empire
  f_install_git_clone "Empire" "https://github.com/EmpireProject/Empire.git" "$prefix/Empire"
  # BloodHound
  #f_install_git_clone "BloodHound" "https://github.com/BloodHoundAD/BloodHound.git" "$prefix/bloodhound"
  # BloodHound - neo4j
  $WGET -O - "https://debian.neo4j.org/neotechnology.gpg.key" | $SUDO $APTKEY add -
  $ECHO "deb https://debian.neo4j.org/repo stable/" | $SUDO $TEE "/etc/apt/sources.list.d/neo4j.list"
  $SUDO $APT update
  $SUDO $APT install neo4j
  # BloodHound - release binaries
  f_install_wget "BloodHound" "https://github.com/BloodHoundAD/BloodHound/releases/download/1.5.2/BloodHound-linux-x64.zip" "/tmp/BloodHound.zip"
  $UNZIP "/tmp/BloodHound.zip" -d "$prefix/"
  $RM "/tmp/BloodHound.zip"

  f_print "\n[*] Install Windows-related tools - done" "ok"
}

########################################
# Database
########################################
function f_install_tools_database() {
  prefix="$directory/Tools/database"
  f_print "\n[*] Install database tools ($prefix)"

  # DbVis
  f_install_wget "DbVis" "http://www.dbvis.com/product_download/dbvis-10.0.13/media/dbvis_linux_10_0_13.deb" "/tmp/dbvis.deb"
  $DPKG -i "/tmp/dbvis.deb"
  $RM "/tmp/dbvis.deb"
  # Odat
  f_install_git_clone "Odat" "https://github.com/quentinhardy/odat.git" "$prefix/odat"
  # MSdat
  f_install_git_clone "MSdat" "https://github.com/quentinhardy/msdat.git" "$prefix/msdat"

  f_print "\n[*] Install database tools - done" "ok"
}

########################################
# Exploits
########################################
function f_install_tools_exploits() {
  prefix="$directory/Tools/exploits"
  f_print "\n[*] Install exploits tools ($prefix)"

  # WindowsExploitSuggester
  f_install_git_clone "WindowsExploitSuggester" "https://github.com/GDSSecurity/Windows-Exploit-Suggester.git" "$prefix/windows-exploit-suggester"
  # metasploit
  f_install_wget "Metasploit" "https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb" "/tmp/msfinstall"
  $CHMOD 755 "/tmp/msfinstall"
  $SUDO "/tmp/msfinstall"


  f_print "\n[*] Install exploits tools - done" "ok"
}

########################################
# Reverse
########################################
function f_install_tools_reverse() {
  prefix="$directory/Tools/reverse"
  f_print "\n[*] Install reverse tools ($prefix)"

  # Radare2
  f_install_git_clone "Radare2" "https://github.com/radare/radare2.git" "$prefix/radare2"
  # Hopper - Free
  f_install_wget "Hopper" "https://d2ap6ypl1xbe4k.cloudfront.net/Hopper-v4-4.3.26-Linux.deb" "/tmp/hopper.deb"
  $DPKG -i "/tmp/hopper.deb"
  $RM "/tmp/hopper.deb"

  f_print "\n[*] Install reverse tools - done" "ok"
}


########################################
# Generic
########################################
function f_install_tools_XXX() {
  prefix="$directory/Tools/XXX"
  f_print "\n[*] Install XXX tools ($prefix)"

  # XXX

  f_print "\n[*] Install XXX tools - done" "ok"
}
